// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wifs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wifs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wifs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wifs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wifs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wifs_2eproto;
namespace wifs {
class ClientInitReq;
struct ClientInitReqDefaultTypeInternal;
extern ClientInitReqDefaultTypeInternal _ClientInitReq_default_instance_;
class ClientInitRes;
struct ClientInitResDefaultTypeInternal;
extern ClientInitResDefaultTypeInternal _ClientInitRes_default_instance_;
class HeartBeat;
struct HeartBeatDefaultTypeInternal;
extern HeartBeatDefaultTypeInternal _HeartBeat_default_instance_;
class ReadReq;
struct ReadReqDefaultTypeInternal;
extern ReadReqDefaultTypeInternal _ReadReq_default_instance_;
class ReadRes;
struct ReadResDefaultTypeInternal;
extern ReadResDefaultTypeInternal _ReadRes_default_instance_;
class WriteReq;
struct WriteReqDefaultTypeInternal;
extern WriteReqDefaultTypeInternal _WriteReq_default_instance_;
class WriteRes;
struct WriteResDefaultTypeInternal;
extern WriteResDefaultTypeInternal _WriteRes_default_instance_;
}  // namespace wifs
PROTOBUF_NAMESPACE_OPEN
template<> ::wifs::ClientInitReq* Arena::CreateMaybeMessage<::wifs::ClientInitReq>(Arena*);
template<> ::wifs::ClientInitRes* Arena::CreateMaybeMessage<::wifs::ClientInitRes>(Arena*);
template<> ::wifs::HeartBeat* Arena::CreateMaybeMessage<::wifs::HeartBeat>(Arena*);
template<> ::wifs::ReadReq* Arena::CreateMaybeMessage<::wifs::ReadReq>(Arena*);
template<> ::wifs::ReadRes* Arena::CreateMaybeMessage<::wifs::ReadRes>(Arena*);
template<> ::wifs::WriteReq* Arena::CreateMaybeMessage<::wifs::WriteReq>(Arena*);
template<> ::wifs::WriteRes* Arena::CreateMaybeMessage<::wifs::WriteRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wifs {

enum HeartBeat_State : int {
  HeartBeat_State_INIT = 0,
  HeartBeat_State_READY = 1,
  HeartBeat_State_HeartBeat_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HeartBeat_State_HeartBeat_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HeartBeat_State_IsValid(int value);
constexpr HeartBeat_State HeartBeat_State_State_MIN = HeartBeat_State_INIT;
constexpr HeartBeat_State HeartBeat_State_State_MAX = HeartBeat_State_READY;
constexpr int HeartBeat_State_State_ARRAYSIZE = HeartBeat_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeartBeat_State_descriptor();
template<typename T>
inline const std::string& HeartBeat_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HeartBeat_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HeartBeat_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HeartBeat_State_descriptor(), enum_t_value);
}
inline bool HeartBeat_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HeartBeat_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HeartBeat_State>(
    HeartBeat_State_descriptor(), name, value);
}
// ===================================================================

class HeartBeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wifs.HeartBeat) */ {
 public:
  inline HeartBeat() : HeartBeat(nullptr) {}
  ~HeartBeat() override;
  explicit constexpr HeartBeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeat(const HeartBeat& from);
  HeartBeat(HeartBeat&& from) noexcept
    : HeartBeat() {
    *this = ::std::move(from);
  }

  inline HeartBeat& operator=(const HeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeat& operator=(HeartBeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeat* internal_default_instance() {
    return reinterpret_cast<const HeartBeat*>(
               &_HeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HeartBeat& a, HeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeartBeat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wifs.HeartBeat";
  }
  protected:
  explicit HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeartBeat_State State;
  static constexpr State INIT =
    HeartBeat_State_INIT;
  static constexpr State READY =
    HeartBeat_State_READY;
  static inline bool State_IsValid(int value) {
    return HeartBeat_State_IsValid(value);
  }
  static constexpr State State_MIN =
    HeartBeat_State_State_MIN;
  static constexpr State State_MAX =
    HeartBeat_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    HeartBeat_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return HeartBeat_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return HeartBeat_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return HeartBeat_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .wifs.HeartBeat.State state = 1;
  void clear_state();
  ::wifs::HeartBeat_State state() const;
  void set_state(::wifs::HeartBeat_State value);
  private:
  ::wifs::HeartBeat_State _internal_state() const;
  void _internal_set_state(::wifs::HeartBeat_State value);
  public:

  // @@protoc_insertion_point(class_scope:wifs.HeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifs_2eproto;
};
// -------------------------------------------------------------------

class ClientInitReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:wifs.ClientInitReq) */ {
 public:
  inline ClientInitReq() : ClientInitReq(nullptr) {}
  explicit constexpr ClientInitReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientInitReq(const ClientInitReq& from);
  ClientInitReq(ClientInitReq&& from) noexcept
    : ClientInitReq() {
    *this = ::std::move(from);
  }

  inline ClientInitReq& operator=(const ClientInitReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInitReq& operator=(ClientInitReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientInitReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientInitReq* internal_default_instance() {
    return reinterpret_cast<const ClientInitReq*>(
               &_ClientInitReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientInitReq& a, ClientInitReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientInitReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInitReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientInitReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientInitReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClientInitReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClientInitReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wifs.ClientInitReq";
  }
  protected:
  explicit ClientInitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wifs.ClientInitReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifs_2eproto;
};
// -------------------------------------------------------------------

class ClientInitRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wifs.ClientInitRes) */ {
 public:
  inline ClientInitRes() : ClientInitRes(nullptr) {}
  ~ClientInitRes() override;
  explicit constexpr ClientInitRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientInitRes(const ClientInitRes& from);
  ClientInitRes(ClientInitRes&& from) noexcept
    : ClientInitRes() {
    *this = ::std::move(from);
  }

  inline ClientInitRes& operator=(const ClientInitRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInitRes& operator=(ClientInitRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientInitRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientInitRes* internal_default_instance() {
    return reinterpret_cast<const ClientInitRes*>(
               &_ClientInitRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientInitRes& a, ClientInitRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientInitRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInitRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientInitRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientInitRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientInitRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientInitRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientInitRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wifs.ClientInitRes";
  }
  protected:
  explicit ClientInitRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryIpFieldNumber = 1,
  };
  // string primary_ip = 1;
  void clear_primary_ip();
  const std::string& primary_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_ip();
  PROTOBUF_NODISCARD std::string* release_primary_ip();
  void set_allocated_primary_ip(std::string* primary_ip);
  private:
  const std::string& _internal_primary_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_ip(const std::string& value);
  std::string* _internal_mutable_primary_ip();
  public:

  // @@protoc_insertion_point(class_scope:wifs.ClientInitRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifs_2eproto;
};
// -------------------------------------------------------------------

class WriteReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wifs.WriteReq) */ {
 public:
  inline WriteReq() : WriteReq(nullptr) {}
  ~WriteReq() override;
  explicit constexpr WriteReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteReq(const WriteReq& from);
  WriteReq(WriteReq&& from) noexcept
    : WriteReq() {
    *this = ::std::move(from);
  }

  inline WriteReq& operator=(const WriteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteReq& operator=(WriteReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteReq* internal_default_instance() {
    return reinterpret_cast<const WriteReq*>(
               &_WriteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WriteReq& a, WriteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wifs.WriteReq";
  }
  protected:
  explicit WriteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // bytes buf = 2;
  void clear_buf();
  const std::string& buf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buf();
  PROTOBUF_NODISCARD std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // int32 address = 1;
  void clear_address();
  int32_t address() const;
  void set_address(int32_t value);
  private:
  int32_t _internal_address() const;
  void _internal_set_address(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wifs.WriteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  int32_t address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifs_2eproto;
};
// -------------------------------------------------------------------

class WriteRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wifs.WriteRes) */ {
 public:
  inline WriteRes() : WriteRes(nullptr) {}
  ~WriteRes() override;
  explicit constexpr WriteRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteRes(const WriteRes& from);
  WriteRes(WriteRes&& from) noexcept
    : WriteRes() {
    *this = ::std::move(from);
  }

  inline WriteRes& operator=(const WriteRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRes& operator=(WriteRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteRes* internal_default_instance() {
    return reinterpret_cast<const WriteRes*>(
               &_WriteRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteRes& a, WriteRes& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wifs.WriteRes";
  }
  protected:
  explicit WriteRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // bytes buf = 2;
  void clear_buf();
  const std::string& buf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buf();
  PROTOBUF_NODISCARD std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wifs.WriteRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  int32_t status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifs_2eproto;
};
// -------------------------------------------------------------------

class ReadReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wifs.ReadReq) */ {
 public:
  inline ReadReq() : ReadReq(nullptr) {}
  ~ReadReq() override;
  explicit constexpr ReadReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadReq(const ReadReq& from);
  ReadReq(ReadReq&& from) noexcept
    : ReadReq() {
    *this = ::std::move(from);
  }

  inline ReadReq& operator=(const ReadReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq& operator=(ReadReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadReq* internal_default_instance() {
    return reinterpret_cast<const ReadReq*>(
               &_ReadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReadReq& a, ReadReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wifs.ReadReq";
  }
  protected:
  explicit ReadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // bytes buf = 2;
  void clear_buf();
  const std::string& buf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buf();
  PROTOBUF_NODISCARD std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // int32 address = 1;
  void clear_address();
  int32_t address() const;
  void set_address(int32_t value);
  private:
  int32_t _internal_address() const;
  void _internal_set_address(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wifs.ReadReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  int32_t address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifs_2eproto;
};
// -------------------------------------------------------------------

class ReadRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wifs.ReadRes) */ {
 public:
  inline ReadRes() : ReadRes(nullptr) {}
  ~ReadRes() override;
  explicit constexpr ReadRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRes(const ReadRes& from);
  ReadRes(ReadRes&& from) noexcept
    : ReadRes() {
    *this = ::std::move(from);
  }

  inline ReadRes& operator=(const ReadRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRes& operator=(ReadRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRes* internal_default_instance() {
    return reinterpret_cast<const ReadRes*>(
               &_ReadRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadRes& a, ReadRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wifs.ReadRes";
  }
  protected:
  explicit ReadRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // bytes buf = 2;
  void clear_buf();
  const std::string& buf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buf();
  PROTOBUF_NODISCARD std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wifs.ReadRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  int32_t status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeartBeat

// .wifs.HeartBeat.State state = 1;
inline void HeartBeat::clear_state() {
  state_ = 0;
}
inline ::wifs::HeartBeat_State HeartBeat::_internal_state() const {
  return static_cast< ::wifs::HeartBeat_State >(state_);
}
inline ::wifs::HeartBeat_State HeartBeat::state() const {
  // @@protoc_insertion_point(field_get:wifs.HeartBeat.state)
  return _internal_state();
}
inline void HeartBeat::_internal_set_state(::wifs::HeartBeat_State value) {
  
  state_ = value;
}
inline void HeartBeat::set_state(::wifs::HeartBeat_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:wifs.HeartBeat.state)
}

// -------------------------------------------------------------------

// ClientInitReq

// -------------------------------------------------------------------

// ClientInitRes

// string primary_ip = 1;
inline void ClientInitRes::clear_primary_ip() {
  primary_ip_.ClearToEmpty();
}
inline const std::string& ClientInitRes::primary_ip() const {
  // @@protoc_insertion_point(field_get:wifs.ClientInitRes.primary_ip)
  return _internal_primary_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientInitRes::set_primary_ip(ArgT0&& arg0, ArgT... args) {
 
 primary_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wifs.ClientInitRes.primary_ip)
}
inline std::string* ClientInitRes::mutable_primary_ip() {
  std::string* _s = _internal_mutable_primary_ip();
  // @@protoc_insertion_point(field_mutable:wifs.ClientInitRes.primary_ip)
  return _s;
}
inline const std::string& ClientInitRes::_internal_primary_ip() const {
  return primary_ip_.Get();
}
inline void ClientInitRes::_internal_set_primary_ip(const std::string& value) {
  
  primary_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientInitRes::_internal_mutable_primary_ip() {
  
  return primary_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientInitRes::release_primary_ip() {
  // @@protoc_insertion_point(field_release:wifs.ClientInitRes.primary_ip)
  return primary_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientInitRes::set_allocated_primary_ip(std::string* primary_ip) {
  if (primary_ip != nullptr) {
    
  } else {
    
  }
  primary_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (primary_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    primary_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wifs.ClientInitRes.primary_ip)
}

// -------------------------------------------------------------------

// WriteReq

// int32 address = 1;
inline void WriteReq::clear_address() {
  address_ = 0;
}
inline int32_t WriteReq::_internal_address() const {
  return address_;
}
inline int32_t WriteReq::address() const {
  // @@protoc_insertion_point(field_get:wifs.WriteReq.address)
  return _internal_address();
}
inline void WriteReq::_internal_set_address(int32_t value) {
  
  address_ = value;
}
inline void WriteReq::set_address(int32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:wifs.WriteReq.address)
}

// bytes buf = 2;
inline void WriteReq::clear_buf() {
  buf_.ClearToEmpty();
}
inline const std::string& WriteReq::buf() const {
  // @@protoc_insertion_point(field_get:wifs.WriteReq.buf)
  return _internal_buf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteReq::set_buf(ArgT0&& arg0, ArgT... args) {
 
 buf_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wifs.WriteReq.buf)
}
inline std::string* WriteReq::mutable_buf() {
  std::string* _s = _internal_mutable_buf();
  // @@protoc_insertion_point(field_mutable:wifs.WriteReq.buf)
  return _s;
}
inline const std::string& WriteReq::_internal_buf() const {
  return buf_.Get();
}
inline void WriteReq::_internal_set_buf(const std::string& value) {
  
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteReq::_internal_mutable_buf() {
  
  return buf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteReq::release_buf() {
  // @@protoc_insertion_point(field_release:wifs.WriteReq.buf)
  return buf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteReq::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    
  } else {
    
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buf_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wifs.WriteReq.buf)
}

// -------------------------------------------------------------------

// WriteRes

// int32 status = 1;
inline void WriteRes::clear_status() {
  status_ = 0;
}
inline int32_t WriteRes::_internal_status() const {
  return status_;
}
inline int32_t WriteRes::status() const {
  // @@protoc_insertion_point(field_get:wifs.WriteRes.status)
  return _internal_status();
}
inline void WriteRes::_internal_set_status(int32_t value) {
  
  status_ = value;
}
inline void WriteRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:wifs.WriteRes.status)
}

// bytes buf = 2;
inline void WriteRes::clear_buf() {
  buf_.ClearToEmpty();
}
inline const std::string& WriteRes::buf() const {
  // @@protoc_insertion_point(field_get:wifs.WriteRes.buf)
  return _internal_buf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteRes::set_buf(ArgT0&& arg0, ArgT... args) {
 
 buf_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wifs.WriteRes.buf)
}
inline std::string* WriteRes::mutable_buf() {
  std::string* _s = _internal_mutable_buf();
  // @@protoc_insertion_point(field_mutable:wifs.WriteRes.buf)
  return _s;
}
inline const std::string& WriteRes::_internal_buf() const {
  return buf_.Get();
}
inline void WriteRes::_internal_set_buf(const std::string& value) {
  
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteRes::_internal_mutable_buf() {
  
  return buf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteRes::release_buf() {
  // @@protoc_insertion_point(field_release:wifs.WriteRes.buf)
  return buf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteRes::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    
  } else {
    
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buf_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wifs.WriteRes.buf)
}

// -------------------------------------------------------------------

// ReadReq

// int32 address = 1;
inline void ReadReq::clear_address() {
  address_ = 0;
}
inline int32_t ReadReq::_internal_address() const {
  return address_;
}
inline int32_t ReadReq::address() const {
  // @@protoc_insertion_point(field_get:wifs.ReadReq.address)
  return _internal_address();
}
inline void ReadReq::_internal_set_address(int32_t value) {
  
  address_ = value;
}
inline void ReadReq::set_address(int32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:wifs.ReadReq.address)
}

// bytes buf = 2;
inline void ReadReq::clear_buf() {
  buf_.ClearToEmpty();
}
inline const std::string& ReadReq::buf() const {
  // @@protoc_insertion_point(field_get:wifs.ReadReq.buf)
  return _internal_buf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadReq::set_buf(ArgT0&& arg0, ArgT... args) {
 
 buf_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wifs.ReadReq.buf)
}
inline std::string* ReadReq::mutable_buf() {
  std::string* _s = _internal_mutable_buf();
  // @@protoc_insertion_point(field_mutable:wifs.ReadReq.buf)
  return _s;
}
inline const std::string& ReadReq::_internal_buf() const {
  return buf_.Get();
}
inline void ReadReq::_internal_set_buf(const std::string& value) {
  
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadReq::_internal_mutable_buf() {
  
  return buf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadReq::release_buf() {
  // @@protoc_insertion_point(field_release:wifs.ReadReq.buf)
  return buf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadReq::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    
  } else {
    
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buf_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wifs.ReadReq.buf)
}

// -------------------------------------------------------------------

// ReadRes

// int32 status = 1;
inline void ReadRes::clear_status() {
  status_ = 0;
}
inline int32_t ReadRes::_internal_status() const {
  return status_;
}
inline int32_t ReadRes::status() const {
  // @@protoc_insertion_point(field_get:wifs.ReadRes.status)
  return _internal_status();
}
inline void ReadRes::_internal_set_status(int32_t value) {
  
  status_ = value;
}
inline void ReadRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:wifs.ReadRes.status)
}

// bytes buf = 2;
inline void ReadRes::clear_buf() {
  buf_.ClearToEmpty();
}
inline const std::string& ReadRes::buf() const {
  // @@protoc_insertion_point(field_get:wifs.ReadRes.buf)
  return _internal_buf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadRes::set_buf(ArgT0&& arg0, ArgT... args) {
 
 buf_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wifs.ReadRes.buf)
}
inline std::string* ReadRes::mutable_buf() {
  std::string* _s = _internal_mutable_buf();
  // @@protoc_insertion_point(field_mutable:wifs.ReadRes.buf)
  return _s;
}
inline const std::string& ReadRes::_internal_buf() const {
  return buf_.Get();
}
inline void ReadRes::_internal_set_buf(const std::string& value) {
  
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadRes::_internal_mutable_buf() {
  
  return buf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadRes::release_buf() {
  // @@protoc_insertion_point(field_release:wifs.ReadRes.buf)
  return buf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadRes::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    
  } else {
    
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buf_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wifs.ReadRes.buf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wifs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::wifs::HeartBeat_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wifs::HeartBeat_State>() {
  return ::wifs::HeartBeat_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wifs_2eproto
