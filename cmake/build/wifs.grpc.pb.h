// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wifs.proto
#ifndef GRPC_wifs_2eproto__INCLUDED
#define GRPC_wifs_2eproto__INCLUDED

#include "wifs.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace wifs {

class WIFS final {
 public:
  static constexpr char const* service_full_name() {
    return "wifs.WIFS";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::wifs::HeartBeat* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::HeartBeat>> AsyncPing(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::HeartBeat>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::HeartBeat>> PrepareAsyncPing(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::HeartBeat>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status wifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::wifs::ReadRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ReadRes>> Asyncwifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ReadRes>>(Asyncwifs_READRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ReadRes>> PrepareAsyncwifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ReadRes>>(PrepareAsyncwifs_READRaw(context, request, cq));
    }
    virtual ::grpc::Status wifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::wifs::WriteRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::WriteRes>> Asyncwifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::WriteRes>>(Asyncwifs_WRITERaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::WriteRes>> PrepareAsyncwifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::WriteRes>>(PrepareAsyncwifs_WRITERaw(context, request, cq));
    }
    virtual ::grpc::Status wifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::wifs::ClientInitRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ClientInitRes>> Asyncwifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ClientInitRes>>(Asyncwifs_INITRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ClientInitRes>> PrepareAsyncwifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ClientInitRes>>(PrepareAsyncwifs_INITRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Ping(::grpc::ClientContext* context, const ::wifs::HeartBeat* request, ::wifs::HeartBeat* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::wifs::HeartBeat* request, ::wifs::HeartBeat* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void wifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq* request, ::wifs::ReadRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void wifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq* request, ::wifs::ReadRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void wifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq* request, ::wifs::WriteRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void wifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq* request, ::wifs::WriteRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void wifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq* request, ::wifs::ClientInitRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void wifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq* request, ::wifs::ClientInitRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wifs::HeartBeat>* AsyncPingRaw(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wifs::HeartBeat>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ReadRes>* Asyncwifs_READRaw(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ReadRes>* PrepareAsyncwifs_READRaw(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wifs::WriteRes>* Asyncwifs_WRITERaw(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wifs::WriteRes>* PrepareAsyncwifs_WRITERaw(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ClientInitRes>* Asyncwifs_INITRaw(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wifs::ClientInitRes>* PrepareAsyncwifs_INITRaw(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::wifs::HeartBeat* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::HeartBeat>> AsyncPing(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::HeartBeat>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::HeartBeat>> PrepareAsyncPing(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::HeartBeat>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status wifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::wifs::ReadRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::ReadRes>> Asyncwifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::ReadRes>>(Asyncwifs_READRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::ReadRes>> PrepareAsyncwifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::ReadRes>>(PrepareAsyncwifs_READRaw(context, request, cq));
    }
    ::grpc::Status wifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::wifs::WriteRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::WriteRes>> Asyncwifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::WriteRes>>(Asyncwifs_WRITERaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::WriteRes>> PrepareAsyncwifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::WriteRes>>(PrepareAsyncwifs_WRITERaw(context, request, cq));
    }
    ::grpc::Status wifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::wifs::ClientInitRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::ClientInitRes>> Asyncwifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::ClientInitRes>>(Asyncwifs_INITRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::ClientInitRes>> PrepareAsyncwifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wifs::ClientInitRes>>(PrepareAsyncwifs_INITRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Ping(::grpc::ClientContext* context, const ::wifs::HeartBeat* request, ::wifs::HeartBeat* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::wifs::HeartBeat* request, ::wifs::HeartBeat* response, ::grpc::ClientUnaryReactor* reactor) override;
      void wifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq* request, ::wifs::ReadRes* response, std::function<void(::grpc::Status)>) override;
      void wifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq* request, ::wifs::ReadRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void wifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq* request, ::wifs::WriteRes* response, std::function<void(::grpc::Status)>) override;
      void wifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq* request, ::wifs::WriteRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void wifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq* request, ::wifs::ClientInitRes* response, std::function<void(::grpc::Status)>) override;
      void wifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq* request, ::wifs::ClientInitRes* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::wifs::HeartBeat>* AsyncPingRaw(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wifs::HeartBeat>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wifs::ReadRes>* Asyncwifs_READRaw(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wifs::ReadRes>* PrepareAsyncwifs_READRaw(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wifs::WriteRes>* Asyncwifs_WRITERaw(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wifs::WriteRes>* PrepareAsyncwifs_WRITERaw(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wifs::ClientInitRes>* Asyncwifs_INITRaw(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wifs::ClientInitRes>* PrepareAsyncwifs_INITRaw(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_wifs_READ_;
    const ::grpc::internal::RpcMethod rpcmethod_wifs_WRITE_;
    const ::grpc::internal::RpcMethod rpcmethod_wifs_INIT_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::wifs::HeartBeat* request, ::wifs::HeartBeat* response);
    virtual ::grpc::Status wifs_READ(::grpc::ServerContext* context, const ::wifs::ReadReq* request, ::wifs::ReadRes* response);
    virtual ::grpc::Status wifs_WRITE(::grpc::ServerContext* context, const ::wifs::WriteReq* request, ::wifs::WriteRes* response);
    virtual ::grpc::Status wifs_INIT(::grpc::ServerContext* context, const ::wifs::ClientInitReq* request, ::wifs::ClientInitRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::wifs::HeartBeat* /*request*/, ::wifs::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::wifs::HeartBeat* request, ::grpc::ServerAsyncResponseWriter< ::wifs::HeartBeat>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_wifs_READ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_wifs_READ() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_wifs_READ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_READ(::grpc::ServerContext* /*context*/, const ::wifs::ReadReq* /*request*/, ::wifs::ReadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwifs_READ(::grpc::ServerContext* context, ::wifs::ReadReq* request, ::grpc::ServerAsyncResponseWriter< ::wifs::ReadRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_wifs_WRITE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_wifs_WRITE() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_wifs_WRITE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_WRITE(::grpc::ServerContext* /*context*/, const ::wifs::WriteReq* /*request*/, ::wifs::WriteRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwifs_WRITE(::grpc::ServerContext* context, ::wifs::WriteReq* request, ::grpc::ServerAsyncResponseWriter< ::wifs::WriteRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_wifs_INIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_wifs_INIT() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_wifs_INIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_INIT(::grpc::ServerContext* /*context*/, const ::wifs::ClientInitReq* /*request*/, ::wifs::ClientInitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwifs_INIT(::grpc::ServerContext* context, ::wifs::ClientInitReq* request, ::grpc::ServerAsyncResponseWriter< ::wifs::ClientInitRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_wifs_READ<WithAsyncMethod_wifs_WRITE<WithAsyncMethod_wifs_INIT<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::wifs::HeartBeat, ::wifs::HeartBeat>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wifs::HeartBeat* request, ::wifs::HeartBeat* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::MessageAllocator< ::wifs::HeartBeat, ::wifs::HeartBeat>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wifs::HeartBeat, ::wifs::HeartBeat>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::wifs::HeartBeat* /*request*/, ::wifs::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::wifs::HeartBeat* /*request*/, ::wifs::HeartBeat* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_wifs_READ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_wifs_READ() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::wifs::ReadReq, ::wifs::ReadRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wifs::ReadReq* request, ::wifs::ReadRes* response) { return this->wifs_READ(context, request, response); }));}
    void SetMessageAllocatorFor_wifs_READ(
        ::grpc::MessageAllocator< ::wifs::ReadReq, ::wifs::ReadRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wifs::ReadReq, ::wifs::ReadRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_wifs_READ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_READ(::grpc::ServerContext* /*context*/, const ::wifs::ReadReq* /*request*/, ::wifs::ReadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* wifs_READ(
      ::grpc::CallbackServerContext* /*context*/, const ::wifs::ReadReq* /*request*/, ::wifs::ReadRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_wifs_WRITE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_wifs_WRITE() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::wifs::WriteReq, ::wifs::WriteRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wifs::WriteReq* request, ::wifs::WriteRes* response) { return this->wifs_WRITE(context, request, response); }));}
    void SetMessageAllocatorFor_wifs_WRITE(
        ::grpc::MessageAllocator< ::wifs::WriteReq, ::wifs::WriteRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wifs::WriteReq, ::wifs::WriteRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_wifs_WRITE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_WRITE(::grpc::ServerContext* /*context*/, const ::wifs::WriteReq* /*request*/, ::wifs::WriteRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* wifs_WRITE(
      ::grpc::CallbackServerContext* /*context*/, const ::wifs::WriteReq* /*request*/, ::wifs::WriteRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_wifs_INIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_wifs_INIT() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::wifs::ClientInitReq, ::wifs::ClientInitRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wifs::ClientInitReq* request, ::wifs::ClientInitRes* response) { return this->wifs_INIT(context, request, response); }));}
    void SetMessageAllocatorFor_wifs_INIT(
        ::grpc::MessageAllocator< ::wifs::ClientInitReq, ::wifs::ClientInitRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wifs::ClientInitReq, ::wifs::ClientInitRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_wifs_INIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_INIT(::grpc::ServerContext* /*context*/, const ::wifs::ClientInitReq* /*request*/, ::wifs::ClientInitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* wifs_INIT(
      ::grpc::CallbackServerContext* /*context*/, const ::wifs::ClientInitReq* /*request*/, ::wifs::ClientInitRes* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Ping<WithCallbackMethod_wifs_READ<WithCallbackMethod_wifs_WRITE<WithCallbackMethod_wifs_INIT<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::wifs::HeartBeat* /*request*/, ::wifs::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_wifs_READ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_wifs_READ() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_wifs_READ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_READ(::grpc::ServerContext* /*context*/, const ::wifs::ReadReq* /*request*/, ::wifs::ReadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_wifs_WRITE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_wifs_WRITE() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_wifs_WRITE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_WRITE(::grpc::ServerContext* /*context*/, const ::wifs::WriteReq* /*request*/, ::wifs::WriteRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_wifs_INIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_wifs_INIT() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_wifs_INIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_INIT(::grpc::ServerContext* /*context*/, const ::wifs::ClientInitReq* /*request*/, ::wifs::ClientInitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::wifs::HeartBeat* /*request*/, ::wifs::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_wifs_READ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_wifs_READ() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_wifs_READ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_READ(::grpc::ServerContext* /*context*/, const ::wifs::ReadReq* /*request*/, ::wifs::ReadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwifs_READ(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_wifs_WRITE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_wifs_WRITE() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_wifs_WRITE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_WRITE(::grpc::ServerContext* /*context*/, const ::wifs::WriteReq* /*request*/, ::wifs::WriteRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwifs_WRITE(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_wifs_INIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_wifs_INIT() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_wifs_INIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_INIT(::grpc::ServerContext* /*context*/, const ::wifs::ClientInitReq* /*request*/, ::wifs::ClientInitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwifs_INIT(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::wifs::HeartBeat* /*request*/, ::wifs::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_wifs_READ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_wifs_READ() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->wifs_READ(context, request, response); }));
    }
    ~WithRawCallbackMethod_wifs_READ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_READ(::grpc::ServerContext* /*context*/, const ::wifs::ReadReq* /*request*/, ::wifs::ReadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* wifs_READ(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_wifs_WRITE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_wifs_WRITE() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->wifs_WRITE(context, request, response); }));
    }
    ~WithRawCallbackMethod_wifs_WRITE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_WRITE(::grpc::ServerContext* /*context*/, const ::wifs::WriteReq* /*request*/, ::wifs::WriteRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* wifs_WRITE(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_wifs_INIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_wifs_INIT() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->wifs_INIT(context, request, response); }));
    }
    ~WithRawCallbackMethod_wifs_INIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wifs_INIT(::grpc::ServerContext* /*context*/, const ::wifs::ClientInitReq* /*request*/, ::wifs::ClientInitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* wifs_INIT(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wifs::HeartBeat, ::wifs::HeartBeat>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wifs::HeartBeat, ::wifs::HeartBeat>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::wifs::HeartBeat* /*request*/, ::wifs::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wifs::HeartBeat,::wifs::HeartBeat>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_wifs_READ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_wifs_READ() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wifs::ReadReq, ::wifs::ReadRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wifs::ReadReq, ::wifs::ReadRes>* streamer) {
                       return this->Streamedwifs_READ(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_wifs_READ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status wifs_READ(::grpc::ServerContext* /*context*/, const ::wifs::ReadReq* /*request*/, ::wifs::ReadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedwifs_READ(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wifs::ReadReq,::wifs::ReadRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_wifs_WRITE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_wifs_WRITE() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wifs::WriteReq, ::wifs::WriteRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wifs::WriteReq, ::wifs::WriteRes>* streamer) {
                       return this->Streamedwifs_WRITE(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_wifs_WRITE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status wifs_WRITE(::grpc::ServerContext* /*context*/, const ::wifs::WriteReq* /*request*/, ::wifs::WriteRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedwifs_WRITE(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wifs::WriteReq,::wifs::WriteRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_wifs_INIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_wifs_INIT() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wifs::ClientInitReq, ::wifs::ClientInitRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wifs::ClientInitReq, ::wifs::ClientInitRes>* streamer) {
                       return this->Streamedwifs_INIT(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_wifs_INIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status wifs_INIT(::grpc::ServerContext* /*context*/, const ::wifs::ClientInitReq* /*request*/, ::wifs::ClientInitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedwifs_INIT(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wifs::ClientInitReq,::wifs::ClientInitRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_wifs_READ<WithStreamedUnaryMethod_wifs_WRITE<WithStreamedUnaryMethod_wifs_INIT<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_wifs_READ<WithStreamedUnaryMethod_wifs_WRITE<WithStreamedUnaryMethod_wifs_INIT<Service > > > > StreamedService;
};

}  // namespace wifs


#endif  // GRPC_wifs_2eproto__INCLUDED
