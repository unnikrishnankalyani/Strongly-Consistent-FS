// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wifs.proto

#include "wifs.pb.h"
#include "wifs.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace wifs {

static const char* WIFS_method_names[] = {
  "/wifs.WIFS/Ping",
  "/wifs.WIFS/wifs_READ",
  "/wifs.WIFS/wifs_WRITE",
  "/wifs.WIFS/wifs_INIT",
};

std::unique_ptr< WIFS::Stub> WIFS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WIFS::Stub> stub(new WIFS::Stub(channel, options));
  return stub;
}

WIFS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(WIFS_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_wifs_READ_(WIFS_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_wifs_WRITE_(WIFS_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_wifs_INIT_(WIFS_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WIFS::Stub::Ping(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::wifs::HeartBeat* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wifs::HeartBeat, ::wifs::HeartBeat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void WIFS::Stub::async::Ping(::grpc::ClientContext* context, const ::wifs::HeartBeat* request, ::wifs::HeartBeat* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wifs::HeartBeat, ::wifs::HeartBeat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void WIFS::Stub::async::Ping(::grpc::ClientContext* context, const ::wifs::HeartBeat* request, ::wifs::HeartBeat* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wifs::HeartBeat>* WIFS::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wifs::HeartBeat, ::wifs::HeartBeat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wifs::HeartBeat>* WIFS::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::wifs::HeartBeat& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WIFS::Stub::wifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::wifs::ReadRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wifs::ReadReq, ::wifs::ReadRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_wifs_READ_, context, request, response);
}

void WIFS::Stub::async::wifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq* request, ::wifs::ReadRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wifs::ReadReq, ::wifs::ReadRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wifs_READ_, context, request, response, std::move(f));
}

void WIFS::Stub::async::wifs_READ(::grpc::ClientContext* context, const ::wifs::ReadReq* request, ::wifs::ReadRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wifs_READ_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wifs::ReadRes>* WIFS::Stub::PrepareAsyncwifs_READRaw(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wifs::ReadRes, ::wifs::ReadReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_wifs_READ_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wifs::ReadRes>* WIFS::Stub::Asyncwifs_READRaw(::grpc::ClientContext* context, const ::wifs::ReadReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwifs_READRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WIFS::Stub::wifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::wifs::WriteRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wifs::WriteReq, ::wifs::WriteRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_wifs_WRITE_, context, request, response);
}

void WIFS::Stub::async::wifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq* request, ::wifs::WriteRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wifs::WriteReq, ::wifs::WriteRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wifs_WRITE_, context, request, response, std::move(f));
}

void WIFS::Stub::async::wifs_WRITE(::grpc::ClientContext* context, const ::wifs::WriteReq* request, ::wifs::WriteRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wifs_WRITE_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wifs::WriteRes>* WIFS::Stub::PrepareAsyncwifs_WRITERaw(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wifs::WriteRes, ::wifs::WriteReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_wifs_WRITE_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wifs::WriteRes>* WIFS::Stub::Asyncwifs_WRITERaw(::grpc::ClientContext* context, const ::wifs::WriteReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwifs_WRITERaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WIFS::Stub::wifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::wifs::ClientInitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wifs::ClientInitReq, ::wifs::ClientInitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_wifs_INIT_, context, request, response);
}

void WIFS::Stub::async::wifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq* request, ::wifs::ClientInitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wifs::ClientInitReq, ::wifs::ClientInitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wifs_INIT_, context, request, response, std::move(f));
}

void WIFS::Stub::async::wifs_INIT(::grpc::ClientContext* context, const ::wifs::ClientInitReq* request, ::wifs::ClientInitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wifs_INIT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wifs::ClientInitRes>* WIFS::Stub::PrepareAsyncwifs_INITRaw(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wifs::ClientInitRes, ::wifs::ClientInitReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_wifs_INIT_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wifs::ClientInitRes>* WIFS::Stub::Asyncwifs_INITRaw(::grpc::ClientContext* context, const ::wifs::ClientInitReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwifs_INITRaw(context, request, cq);
  result->StartCall();
  return result;
}

WIFS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WIFS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WIFS::Service, ::wifs::HeartBeat, ::wifs::HeartBeat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WIFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wifs::HeartBeat* req,
             ::wifs::HeartBeat* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WIFS_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WIFS::Service, ::wifs::ReadReq, ::wifs::ReadRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WIFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wifs::ReadReq* req,
             ::wifs::ReadRes* resp) {
               return service->wifs_READ(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WIFS_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WIFS::Service, ::wifs::WriteReq, ::wifs::WriteRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WIFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wifs::WriteReq* req,
             ::wifs::WriteRes* resp) {
               return service->wifs_WRITE(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WIFS_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WIFS::Service, ::wifs::ClientInitReq, ::wifs::ClientInitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WIFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wifs::ClientInitReq* req,
             ::wifs::ClientInitRes* resp) {
               return service->wifs_INIT(ctx, req, resp);
             }, this)));
}

WIFS::Service::~Service() {
}

::grpc::Status WIFS::Service::Ping(::grpc::ServerContext* context, const ::wifs::HeartBeat* request, ::wifs::HeartBeat* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WIFS::Service::wifs_READ(::grpc::ServerContext* context, const ::wifs::ReadReq* request, ::wifs::ReadRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WIFS::Service::wifs_WRITE(::grpc::ServerContext* context, const ::wifs::WriteReq* request, ::wifs::WriteRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WIFS::Service::wifs_INIT(::grpc::ServerContext* context, const ::wifs::ClientInitReq* request, ::wifs::ClientInitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace wifs

