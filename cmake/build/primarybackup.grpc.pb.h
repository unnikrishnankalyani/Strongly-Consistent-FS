// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: primarybackup.proto
#ifndef GRPC_primarybackup_2eproto__INCLUDED
#define GRPC_primarybackup_2eproto__INCLUDED

#include "primarybackup.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace primarybackup {

class PrimaryBackup final {
 public:
  static constexpr char const* service_full_name() {
    return "primarybackup.PrimaryBackup";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Write(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::primarybackup::WriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::WriteResponse>> AsyncWrite(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::WriteResponse>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::WriteResponse>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::WriteResponse>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    // when the backup comes up, it initiates a sync 
    // operation and gets it state up to date. 
    std::unique_ptr< ::grpc::ClientReaderInterface< ::primarybackup::WriteRequest>> Sync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::primarybackup::WriteRequest>>(SyncRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::primarybackup::WriteRequest>> AsyncSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::primarybackup::WriteRequest>>(AsyncSyncRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::primarybackup::WriteRequest>> PrepareAsyncSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::primarybackup::WriteRequest>>(PrepareAsyncSyncRaw(context, request, cq));
    }
    // return heartbeat with state INIT if there are 
    // pending items in the log. 
    virtual ::grpc::Status CheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::primarybackup::HeartBeatSync* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::HeartBeatSync>> AsyncCheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::HeartBeatSync>>(AsyncCheckSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::HeartBeatSync>> PrepareAsyncCheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::HeartBeatSync>>(PrepareAsyncCheckSyncRaw(context, request, cq));
    }
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::primarybackup::InitRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::InitRes>> AsyncInit(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::InitRes>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::InitRes>> PrepareAsyncInit(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::InitRes>>(PrepareAsyncInitRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Write(::grpc::ClientContext* context, const ::primarybackup::WriteRequest* request, ::primarybackup::WriteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Write(::grpc::ClientContext* context, const ::primarybackup::WriteRequest* request, ::primarybackup::WriteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // when the backup comes up, it initiates a sync 
      // operation and gets it state up to date. 
      virtual void Sync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync* request, ::grpc::ClientReadReactor< ::primarybackup::WriteRequest>* reactor) = 0;
      // return heartbeat with state INIT if there are 
      // pending items in the log. 
      virtual void CheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync* request, ::primarybackup::HeartBeatSync* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync* request, ::primarybackup::HeartBeatSync* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::primarybackup::InitReq* request, ::primarybackup::InitRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::primarybackup::InitReq* request, ::primarybackup::InitRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::WriteResponse>* AsyncWriteRaw(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::WriteResponse>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::primarybackup::WriteRequest>* SyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::primarybackup::WriteRequest>* AsyncSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::primarybackup::WriteRequest>* PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::HeartBeatSync>* AsyncCheckSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::HeartBeatSync>* PrepareAsyncCheckSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::InitRes>* AsyncInitRaw(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::primarybackup::InitRes>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Write(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::primarybackup::WriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::WriteResponse>> AsyncWrite(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::WriteResponse>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::WriteResponse>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::WriteResponse>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::primarybackup::WriteRequest>> Sync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::primarybackup::WriteRequest>>(SyncRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::primarybackup::WriteRequest>> AsyncSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::primarybackup::WriteRequest>>(AsyncSyncRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::primarybackup::WriteRequest>> PrepareAsyncSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::primarybackup::WriteRequest>>(PrepareAsyncSyncRaw(context, request, cq));
    }
    ::grpc::Status CheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::primarybackup::HeartBeatSync* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::HeartBeatSync>> AsyncCheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::HeartBeatSync>>(AsyncCheckSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::HeartBeatSync>> PrepareAsyncCheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::HeartBeatSync>>(PrepareAsyncCheckSyncRaw(context, request, cq));
    }
    ::grpc::Status Init(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::primarybackup::InitRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::InitRes>> AsyncInit(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::InitRes>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::InitRes>> PrepareAsyncInit(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::primarybackup::InitRes>>(PrepareAsyncInitRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Write(::grpc::ClientContext* context, const ::primarybackup::WriteRequest* request, ::primarybackup::WriteResponse* response, std::function<void(::grpc::Status)>) override;
      void Write(::grpc::ClientContext* context, const ::primarybackup::WriteRequest* request, ::primarybackup::WriteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Sync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync* request, ::grpc::ClientReadReactor< ::primarybackup::WriteRequest>* reactor) override;
      void CheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync* request, ::primarybackup::HeartBeatSync* response, std::function<void(::grpc::Status)>) override;
      void CheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync* request, ::primarybackup::HeartBeatSync* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Init(::grpc::ClientContext* context, const ::primarybackup::InitReq* request, ::primarybackup::InitRes* response, std::function<void(::grpc::Status)>) override;
      void Init(::grpc::ClientContext* context, const ::primarybackup::InitReq* request, ::primarybackup::InitRes* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::primarybackup::WriteResponse>* AsyncWriteRaw(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::primarybackup::WriteResponse>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::primarybackup::WriteRequest>* SyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request) override;
    ::grpc::ClientAsyncReader< ::primarybackup::WriteRequest>* AsyncSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::primarybackup::WriteRequest>* PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::primarybackup::HeartBeatSync>* AsyncCheckSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::primarybackup::HeartBeatSync>* PrepareAsyncCheckSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::primarybackup::InitRes>* AsyncInitRaw(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::primarybackup::InitRes>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_Sync_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckSync_;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Write(::grpc::ServerContext* context, const ::primarybackup::WriteRequest* request, ::primarybackup::WriteResponse* response);
    // when the backup comes up, it initiates a sync 
    // operation and gets it state up to date. 
    virtual ::grpc::Status Sync(::grpc::ServerContext* context, const ::primarybackup::HeartBeatSync* request, ::grpc::ServerWriter< ::primarybackup::WriteRequest>* writer);
    // return heartbeat with state INIT if there are 
    // pending items in the log. 
    virtual ::grpc::Status CheckSync(::grpc::ServerContext* context, const ::primarybackup::HeartBeatSync* request, ::primarybackup::HeartBeatSync* response);
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::primarybackup::InitReq* request, ::primarybackup::InitRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::primarybackup::WriteRequest* /*request*/, ::primarybackup::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::primarybackup::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::primarybackup::WriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sync() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::grpc::ServerWriter< ::primarybackup::WriteRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSync(::grpc::ServerContext* context, ::primarybackup::HeartBeatSync* request, ::grpc::ServerAsyncWriter< ::primarybackup::WriteRequest>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckSync() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CheckSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::primarybackup::HeartBeatSync* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckSync(::grpc::ServerContext* context, ::primarybackup::HeartBeatSync* request, ::grpc::ServerAsyncResponseWriter< ::primarybackup::HeartBeatSync>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::primarybackup::InitReq* /*request*/, ::primarybackup::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::primarybackup::InitReq* request, ::grpc::ServerAsyncResponseWriter< ::primarybackup::InitRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Write<WithAsyncMethod_Sync<WithAsyncMethod_CheckSync<WithAsyncMethod_Init<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Write() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::primarybackup::WriteRequest, ::primarybackup::WriteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::primarybackup::WriteRequest* request, ::primarybackup::WriteResponse* response) { return this->Write(context, request, response); }));}
    void SetMessageAllocatorFor_Write(
        ::grpc::MessageAllocator< ::primarybackup::WriteRequest, ::primarybackup::WriteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::primarybackup::WriteRequest, ::primarybackup::WriteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::primarybackup::WriteRequest* /*request*/, ::primarybackup::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::primarybackup::WriteRequest* /*request*/, ::primarybackup::WriteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Sync() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::primarybackup::HeartBeatSync, ::primarybackup::WriteRequest>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::primarybackup::HeartBeatSync* request) { return this->Sync(context, request); }));
    }
    ~WithCallbackMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::grpc::ServerWriter< ::primarybackup::WriteRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::primarybackup::WriteRequest>* Sync(
      ::grpc::CallbackServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckSync() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::primarybackup::HeartBeatSync, ::primarybackup::HeartBeatSync>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::primarybackup::HeartBeatSync* request, ::primarybackup::HeartBeatSync* response) { return this->CheckSync(context, request, response); }));}
    void SetMessageAllocatorFor_CheckSync(
        ::grpc::MessageAllocator< ::primarybackup::HeartBeatSync, ::primarybackup::HeartBeatSync>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::primarybackup::HeartBeatSync, ::primarybackup::HeartBeatSync>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::primarybackup::HeartBeatSync* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckSync(
      ::grpc::CallbackServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::primarybackup::HeartBeatSync* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Init() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::primarybackup::InitReq, ::primarybackup::InitRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::primarybackup::InitReq* request, ::primarybackup::InitRes* response) { return this->Init(context, request, response); }));}
    void SetMessageAllocatorFor_Init(
        ::grpc::MessageAllocator< ::primarybackup::InitReq, ::primarybackup::InitRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::primarybackup::InitReq, ::primarybackup::InitRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::primarybackup::InitReq* /*request*/, ::primarybackup::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::primarybackup::InitReq* /*request*/, ::primarybackup::InitRes* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Write<WithCallbackMethod_Sync<WithCallbackMethod_CheckSync<WithCallbackMethod_Init<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::primarybackup::WriteRequest* /*request*/, ::primarybackup::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sync() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::grpc::ServerWriter< ::primarybackup::WriteRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckSync() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CheckSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::primarybackup::HeartBeatSync* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::primarybackup::InitReq* /*request*/, ::primarybackup::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::primarybackup::WriteRequest* /*request*/, ::primarybackup::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sync() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::grpc::ServerWriter< ::primarybackup::WriteRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckSync() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CheckSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::primarybackup::HeartBeatSync* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckSync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::primarybackup::InitReq* /*request*/, ::primarybackup::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Write() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Write(context, request, response); }));
    }
    ~WithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::primarybackup::WriteRequest* /*request*/, ::primarybackup::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Sync() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Sync(context, request); }));
    }
    ~WithRawCallbackMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::grpc::ServerWriter< ::primarybackup::WriteRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Sync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckSync() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckSync(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::primarybackup::HeartBeatSync* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckSync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Init() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Init(context, request, response); }));
    }
    ~WithRawCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::primarybackup::InitReq* /*request*/, ::primarybackup::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Write() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::primarybackup::WriteRequest, ::primarybackup::WriteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::primarybackup::WriteRequest, ::primarybackup::WriteResponse>* streamer) {
                       return this->StreamedWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::primarybackup::WriteRequest* /*request*/, ::primarybackup::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::primarybackup::WriteRequest,::primarybackup::WriteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckSync() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::primarybackup::HeartBeatSync, ::primarybackup::HeartBeatSync>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::primarybackup::HeartBeatSync, ::primarybackup::HeartBeatSync>* streamer) {
                       return this->StreamedCheckSync(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckSync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::primarybackup::HeartBeatSync* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckSync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::primarybackup::HeartBeatSync,::primarybackup::HeartBeatSync>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::primarybackup::InitReq, ::primarybackup::InitRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::primarybackup::InitReq, ::primarybackup::InitRes>* streamer) {
                       return this->StreamedInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::primarybackup::InitReq* /*request*/, ::primarybackup::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::primarybackup::InitReq,::primarybackup::InitRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_CheckSync<WithStreamedUnaryMethod_Init<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Sync() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::primarybackup::HeartBeatSync, ::primarybackup::WriteRequest>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::primarybackup::HeartBeatSync, ::primarybackup::WriteRequest>* streamer) {
                       return this->StreamedSync(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::primarybackup::HeartBeatSync* /*request*/, ::grpc::ServerWriter< ::primarybackup::WriteRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSync(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::primarybackup::HeartBeatSync,::primarybackup::WriteRequest>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Sync<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Write<WithSplitStreamingMethod_Sync<WithStreamedUnaryMethod_CheckSync<WithStreamedUnaryMethod_Init<Service > > > > StreamedService;
};

}  // namespace primarybackup


#endif  // GRPC_primarybackup_2eproto__INCLUDED
