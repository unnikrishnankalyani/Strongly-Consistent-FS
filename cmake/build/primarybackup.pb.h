// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primarybackup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_primarybackup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_primarybackup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_primarybackup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_primarybackup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_primarybackup_2eproto;
namespace primarybackup {
class HeartBeatSync;
struct HeartBeatSyncDefaultTypeInternal;
extern HeartBeatSyncDefaultTypeInternal _HeartBeatSync_default_instance_;
class InitReq;
struct InitReqDefaultTypeInternal;
extern InitReqDefaultTypeInternal _InitReq_default_instance_;
class InitRes;
struct InitResDefaultTypeInternal;
extern InitResDefaultTypeInternal _InitRes_default_instance_;
class WriteRequest;
struct WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
class WriteResponse;
struct WriteResponseDefaultTypeInternal;
extern WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
}  // namespace primarybackup
PROTOBUF_NAMESPACE_OPEN
template<> ::primarybackup::HeartBeatSync* Arena::CreateMaybeMessage<::primarybackup::HeartBeatSync>(Arena*);
template<> ::primarybackup::InitReq* Arena::CreateMaybeMessage<::primarybackup::InitReq>(Arena*);
template<> ::primarybackup::InitRes* Arena::CreateMaybeMessage<::primarybackup::InitRes>(Arena*);
template<> ::primarybackup::WriteRequest* Arena::CreateMaybeMessage<::primarybackup::WriteRequest>(Arena*);
template<> ::primarybackup::WriteResponse* Arena::CreateMaybeMessage<::primarybackup::WriteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace primarybackup {

enum InitReq_Role : int {
  InitReq_Role_LEADER = 0,
  InitReq_Role_FOLLOWER = 1,
  InitReq_Role_InitReq_Role_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InitReq_Role_InitReq_Role_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InitReq_Role_IsValid(int value);
constexpr InitReq_Role InitReq_Role_Role_MIN = InitReq_Role_LEADER;
constexpr InitReq_Role InitReq_Role_Role_MAX = InitReq_Role_FOLLOWER;
constexpr int InitReq_Role_Role_ARRAYSIZE = InitReq_Role_Role_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InitReq_Role_descriptor();
template<typename T>
inline const std::string& InitReq_Role_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InitReq_Role>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InitReq_Role_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InitReq_Role_descriptor(), enum_t_value);
}
inline bool InitReq_Role_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InitReq_Role* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InitReq_Role>(
    InitReq_Role_descriptor(), name, value);
}
enum InitRes_Role : int {
  InitRes_Role_PRIMARY = 0,
  InitRes_Role_BACKUP = 1,
  InitRes_Role_InitRes_Role_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InitRes_Role_InitRes_Role_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InitRes_Role_IsValid(int value);
constexpr InitRes_Role InitRes_Role_Role_MIN = InitRes_Role_PRIMARY;
constexpr InitRes_Role InitRes_Role_Role_MAX = InitRes_Role_BACKUP;
constexpr int InitRes_Role_Role_ARRAYSIZE = InitRes_Role_Role_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InitRes_Role_descriptor();
template<typename T>
inline const std::string& InitRes_Role_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InitRes_Role>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InitRes_Role_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InitRes_Role_descriptor(), enum_t_value);
}
inline bool InitRes_Role_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InitRes_Role* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InitRes_Role>(
    InitRes_Role_descriptor(), name, value);
}
enum HeartBeatSync_State : int {
  HeartBeatSync_State_INIT = 0,
  HeartBeatSync_State_READY = 1,
  HeartBeatSync_State_HeartBeatSync_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HeartBeatSync_State_HeartBeatSync_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HeartBeatSync_State_IsValid(int value);
constexpr HeartBeatSync_State HeartBeatSync_State_State_MIN = HeartBeatSync_State_INIT;
constexpr HeartBeatSync_State HeartBeatSync_State_State_MAX = HeartBeatSync_State_READY;
constexpr int HeartBeatSync_State_State_ARRAYSIZE = HeartBeatSync_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeartBeatSync_State_descriptor();
template<typename T>
inline const std::string& HeartBeatSync_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HeartBeatSync_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HeartBeatSync_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HeartBeatSync_State_descriptor(), enum_t_value);
}
inline bool HeartBeatSync_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HeartBeatSync_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HeartBeatSync_State>(
    HeartBeatSync_State_descriptor(), name, value);
}
enum WriteResponse_Status : int {
  WriteResponse_Status_FAIL = 0,
  WriteResponse_Status_PASS = 1,
  WriteResponse_Status_WriteResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WriteResponse_Status_WriteResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WriteResponse_Status_IsValid(int value);
constexpr WriteResponse_Status WriteResponse_Status_Status_MIN = WriteResponse_Status_FAIL;
constexpr WriteResponse_Status WriteResponse_Status_Status_MAX = WriteResponse_Status_PASS;
constexpr int WriteResponse_Status_Status_ARRAYSIZE = WriteResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteResponse_Status_descriptor();
template<typename T>
inline const std::string& WriteResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriteResponse_Status_descriptor(), enum_t_value);
}
inline bool WriteResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriteResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteResponse_Status>(
    WriteResponse_Status_descriptor(), name, value);
}
// ===================================================================

class InitReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primarybackup.InitReq) */ {
 public:
  inline InitReq() : InitReq(nullptr) {}
  ~InitReq() override;
  explicit constexpr InitReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitReq(const InitReq& from);
  InitReq(InitReq&& from) noexcept
    : InitReq() {
    *this = ::std::move(from);
  }

  inline InitReq& operator=(const InitReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitReq& operator=(InitReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitReq* internal_default_instance() {
    return reinterpret_cast<const InitReq*>(
               &_InitReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitReq& a, InitReq& b) {
    a.Swap(&b);
  }
  inline void Swap(InitReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primarybackup.InitReq";
  }
  protected:
  explicit InitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InitReq_Role Role;
  static constexpr Role LEADER =
    InitReq_Role_LEADER;
  static constexpr Role FOLLOWER =
    InitReq_Role_FOLLOWER;
  static inline bool Role_IsValid(int value) {
    return InitReq_Role_IsValid(value);
  }
  static constexpr Role Role_MIN =
    InitReq_Role_Role_MIN;
  static constexpr Role Role_MAX =
    InitReq_Role_Role_MAX;
  static constexpr int Role_ARRAYSIZE =
    InitReq_Role_Role_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Role_descriptor() {
    return InitReq_Role_descriptor();
  }
  template<typename T>
  static inline const std::string& Role_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Role>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Role_Name.");
    return InitReq_Role_Name(enum_t_value);
  }
  static inline bool Role_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Role* value) {
    return InitReq_Role_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // .primarybackup.InitReq.Role role = 1;
  void clear_role();
  ::primarybackup::InitReq_Role role() const;
  void set_role(::primarybackup::InitReq_Role value);
  private:
  ::primarybackup::InitReq_Role _internal_role() const;
  void _internal_set_role(::primarybackup::InitReq_Role value);
  public:

  // @@protoc_insertion_point(class_scope:primarybackup.InitReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primarybackup_2eproto;
};
// -------------------------------------------------------------------

class InitRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primarybackup.InitRes) */ {
 public:
  inline InitRes() : InitRes(nullptr) {}
  ~InitRes() override;
  explicit constexpr InitRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitRes(const InitRes& from);
  InitRes(InitRes&& from) noexcept
    : InitRes() {
    *this = ::std::move(from);
  }

  inline InitRes& operator=(const InitRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitRes& operator=(InitRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitRes* internal_default_instance() {
    return reinterpret_cast<const InitRes*>(
               &_InitRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitRes& a, InitRes& b) {
    a.Swap(&b);
  }
  inline void Swap(InitRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primarybackup.InitRes";
  }
  protected:
  explicit InitRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InitRes_Role Role;
  static constexpr Role PRIMARY =
    InitRes_Role_PRIMARY;
  static constexpr Role BACKUP =
    InitRes_Role_BACKUP;
  static inline bool Role_IsValid(int value) {
    return InitRes_Role_IsValid(value);
  }
  static constexpr Role Role_MIN =
    InitRes_Role_Role_MIN;
  static constexpr Role Role_MAX =
    InitRes_Role_Role_MAX;
  static constexpr int Role_ARRAYSIZE =
    InitRes_Role_Role_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Role_descriptor() {
    return InitRes_Role_descriptor();
  }
  template<typename T>
  static inline const std::string& Role_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Role>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Role_Name.");
    return InitRes_Role_Name(enum_t_value);
  }
  static inline bool Role_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Role* value) {
    return InitRes_Role_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryIpFieldNumber = 2,
    kRoleFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // string primary_ip = 2;
  void clear_primary_ip();
  const std::string& primary_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_ip();
  PROTOBUF_NODISCARD std::string* release_primary_ip();
  void set_allocated_primary_ip(std::string* primary_ip);
  private:
  const std::string& _internal_primary_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_ip(const std::string& value);
  std::string* _internal_mutable_primary_ip();
  public:

  // .primarybackup.InitRes.Role role = 1;
  void clear_role();
  ::primarybackup::InitRes_Role role() const;
  void set_role(::primarybackup::InitRes_Role value);
  private:
  ::primarybackup::InitRes_Role _internal_role() const;
  void _internal_set_role(::primarybackup::InitRes_Role value);
  public:

  // int32 status = 3;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primarybackup.InitRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_ip_;
  int role_;
  int32_t status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primarybackup_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatSync final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primarybackup.HeartBeatSync) */ {
 public:
  inline HeartBeatSync() : HeartBeatSync(nullptr) {}
  ~HeartBeatSync() override;
  explicit constexpr HeartBeatSync(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatSync(const HeartBeatSync& from);
  HeartBeatSync(HeartBeatSync&& from) noexcept
    : HeartBeatSync() {
    *this = ::std::move(from);
  }

  inline HeartBeatSync& operator=(const HeartBeatSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatSync& operator=(HeartBeatSync&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatSync& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatSync* internal_default_instance() {
    return reinterpret_cast<const HeartBeatSync*>(
               &_HeartBeatSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeartBeatSync& a, HeartBeatSync& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatSync* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatSync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatSync>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatSync& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeartBeatSync& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatSync* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primarybackup.HeartBeatSync";
  }
  protected:
  explicit HeartBeatSync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeartBeatSync_State State;
  static constexpr State INIT =
    HeartBeatSync_State_INIT;
  static constexpr State READY =
    HeartBeatSync_State_READY;
  static inline bool State_IsValid(int value) {
    return HeartBeatSync_State_IsValid(value);
  }
  static constexpr State State_MIN =
    HeartBeatSync_State_State_MIN;
  static constexpr State State_MAX =
    HeartBeatSync_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    HeartBeatSync_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return HeartBeatSync_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return HeartBeatSync_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return HeartBeatSync_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .primarybackup.HeartBeatSync.State state = 1;
  void clear_state();
  ::primarybackup::HeartBeatSync_State state() const;
  void set_state(::primarybackup::HeartBeatSync_State value);
  private:
  ::primarybackup::HeartBeatSync_State _internal_state() const;
  void _internal_set_state(::primarybackup::HeartBeatSync_State value);
  public:

  // @@protoc_insertion_point(class_scope:primarybackup.HeartBeatSync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primarybackup_2eproto;
};
// -------------------------------------------------------------------

class WriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primarybackup.WriteRequest) */ {
 public:
  inline WriteRequest() : WriteRequest(nullptr) {}
  ~WriteRequest() override;
  explicit constexpr WriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteRequest(const WriteRequest& from);
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primarybackup.WriteRequest";
  }
  protected:
  explicit WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 2,
    kBlkAddressFieldNumber = 1,
  };
  // bytes buffer = 2;
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_NODISCARD std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // int32 blk_address = 1;
  void clear_blk_address();
  int32_t blk_address() const;
  void set_blk_address(int32_t value);
  private:
  int32_t _internal_blk_address() const;
  void _internal_set_blk_address(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primarybackup.WriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  int32_t blk_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primarybackup_2eproto;
};
// -------------------------------------------------------------------

class WriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primarybackup.WriteResponse) */ {
 public:
  inline WriteResponse() : WriteResponse(nullptr) {}
  ~WriteResponse() override;
  explicit constexpr WriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteResponse(const WriteResponse& from);
  WriteResponse(WriteResponse&& from) noexcept
    : WriteResponse() {
    *this = ::std::move(from);
  }

  inline WriteResponse& operator=(const WriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteResponse& operator=(WriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteResponse* internal_default_instance() {
    return reinterpret_cast<const WriteResponse*>(
               &_WriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteResponse& a, WriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primarybackup.WriteResponse";
  }
  protected:
  explicit WriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WriteResponse_Status Status;
  static constexpr Status FAIL =
    WriteResponse_Status_FAIL;
  static constexpr Status PASS =
    WriteResponse_Status_PASS;
  static inline bool Status_IsValid(int value) {
    return WriteResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    WriteResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    WriteResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    WriteResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return WriteResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return WriteResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return WriteResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .primarybackup.WriteResponse.Status status = 1;
  void clear_status();
  ::primarybackup::WriteResponse_Status status() const;
  void set_status(::primarybackup::WriteResponse_Status value);
  private:
  ::primarybackup::WriteResponse_Status _internal_status() const;
  void _internal_set_status(::primarybackup::WriteResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:primarybackup.WriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primarybackup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitReq

// .primarybackup.InitReq.Role role = 1;
inline void InitReq::clear_role() {
  role_ = 0;
}
inline ::primarybackup::InitReq_Role InitReq::_internal_role() const {
  return static_cast< ::primarybackup::InitReq_Role >(role_);
}
inline ::primarybackup::InitReq_Role InitReq::role() const {
  // @@protoc_insertion_point(field_get:primarybackup.InitReq.role)
  return _internal_role();
}
inline void InitReq::_internal_set_role(::primarybackup::InitReq_Role value) {
  
  role_ = value;
}
inline void InitReq::set_role(::primarybackup::InitReq_Role value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:primarybackup.InitReq.role)
}

// -------------------------------------------------------------------

// InitRes

// .primarybackup.InitRes.Role role = 1;
inline void InitRes::clear_role() {
  role_ = 0;
}
inline ::primarybackup::InitRes_Role InitRes::_internal_role() const {
  return static_cast< ::primarybackup::InitRes_Role >(role_);
}
inline ::primarybackup::InitRes_Role InitRes::role() const {
  // @@protoc_insertion_point(field_get:primarybackup.InitRes.role)
  return _internal_role();
}
inline void InitRes::_internal_set_role(::primarybackup::InitRes_Role value) {
  
  role_ = value;
}
inline void InitRes::set_role(::primarybackup::InitRes_Role value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:primarybackup.InitRes.role)
}

// string primary_ip = 2;
inline void InitRes::clear_primary_ip() {
  primary_ip_.ClearToEmpty();
}
inline const std::string& InitRes::primary_ip() const {
  // @@protoc_insertion_point(field_get:primarybackup.InitRes.primary_ip)
  return _internal_primary_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitRes::set_primary_ip(ArgT0&& arg0, ArgT... args) {
 
 primary_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:primarybackup.InitRes.primary_ip)
}
inline std::string* InitRes::mutable_primary_ip() {
  std::string* _s = _internal_mutable_primary_ip();
  // @@protoc_insertion_point(field_mutable:primarybackup.InitRes.primary_ip)
  return _s;
}
inline const std::string& InitRes::_internal_primary_ip() const {
  return primary_ip_.Get();
}
inline void InitRes::_internal_set_primary_ip(const std::string& value) {
  
  primary_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitRes::_internal_mutable_primary_ip() {
  
  return primary_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitRes::release_primary_ip() {
  // @@protoc_insertion_point(field_release:primarybackup.InitRes.primary_ip)
  return primary_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitRes::set_allocated_primary_ip(std::string* primary_ip) {
  if (primary_ip != nullptr) {
    
  } else {
    
  }
  primary_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (primary_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    primary_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:primarybackup.InitRes.primary_ip)
}

// int32 status = 3;
inline void InitRes::clear_status() {
  status_ = 0;
}
inline int32_t InitRes::_internal_status() const {
  return status_;
}
inline int32_t InitRes::status() const {
  // @@protoc_insertion_point(field_get:primarybackup.InitRes.status)
  return _internal_status();
}
inline void InitRes::_internal_set_status(int32_t value) {
  
  status_ = value;
}
inline void InitRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:primarybackup.InitRes.status)
}

// -------------------------------------------------------------------

// HeartBeatSync

// .primarybackup.HeartBeatSync.State state = 1;
inline void HeartBeatSync::clear_state() {
  state_ = 0;
}
inline ::primarybackup::HeartBeatSync_State HeartBeatSync::_internal_state() const {
  return static_cast< ::primarybackup::HeartBeatSync_State >(state_);
}
inline ::primarybackup::HeartBeatSync_State HeartBeatSync::state() const {
  // @@protoc_insertion_point(field_get:primarybackup.HeartBeatSync.state)
  return _internal_state();
}
inline void HeartBeatSync::_internal_set_state(::primarybackup::HeartBeatSync_State value) {
  
  state_ = value;
}
inline void HeartBeatSync::set_state(::primarybackup::HeartBeatSync_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:primarybackup.HeartBeatSync.state)
}

// -------------------------------------------------------------------

// WriteRequest

// int32 blk_address = 1;
inline void WriteRequest::clear_blk_address() {
  blk_address_ = 0;
}
inline int32_t WriteRequest::_internal_blk_address() const {
  return blk_address_;
}
inline int32_t WriteRequest::blk_address() const {
  // @@protoc_insertion_point(field_get:primarybackup.WriteRequest.blk_address)
  return _internal_blk_address();
}
inline void WriteRequest::_internal_set_blk_address(int32_t value) {
  
  blk_address_ = value;
}
inline void WriteRequest::set_blk_address(int32_t value) {
  _internal_set_blk_address(value);
  // @@protoc_insertion_point(field_set:primarybackup.WriteRequest.blk_address)
}

// bytes buffer = 2;
inline void WriteRequest::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& WriteRequest::buffer() const {
  // @@protoc_insertion_point(field_get:primarybackup.WriteRequest.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteRequest::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:primarybackup.WriteRequest.buffer)
}
inline std::string* WriteRequest::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:primarybackup.WriteRequest.buffer)
  return _s;
}
inline const std::string& WriteRequest::_internal_buffer() const {
  return buffer_.Get();
}
inline void WriteRequest::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteRequest::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteRequest::release_buffer() {
  // @@protoc_insertion_point(field_release:primarybackup.WriteRequest.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteRequest::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buffer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:primarybackup.WriteRequest.buffer)
}

// -------------------------------------------------------------------

// WriteResponse

// .primarybackup.WriteResponse.Status status = 1;
inline void WriteResponse::clear_status() {
  status_ = 0;
}
inline ::primarybackup::WriteResponse_Status WriteResponse::_internal_status() const {
  return static_cast< ::primarybackup::WriteResponse_Status >(status_);
}
inline ::primarybackup::WriteResponse_Status WriteResponse::status() const {
  // @@protoc_insertion_point(field_get:primarybackup.WriteResponse.status)
  return _internal_status();
}
inline void WriteResponse::_internal_set_status(::primarybackup::WriteResponse_Status value) {
  
  status_ = value;
}
inline void WriteResponse::set_status(::primarybackup::WriteResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:primarybackup.WriteResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace primarybackup

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::primarybackup::InitReq_Role> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primarybackup::InitReq_Role>() {
  return ::primarybackup::InitReq_Role_descriptor();
}
template <> struct is_proto_enum< ::primarybackup::InitRes_Role> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primarybackup::InitRes_Role>() {
  return ::primarybackup::InitRes_Role_descriptor();
}
template <> struct is_proto_enum< ::primarybackup::HeartBeatSync_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primarybackup::HeartBeatSync_State>() {
  return ::primarybackup::HeartBeatSync_State_descriptor();
}
template <> struct is_proto_enum< ::primarybackup::WriteResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primarybackup::WriteResponse_Status>() {
  return ::primarybackup::WriteResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_primarybackup_2eproto
