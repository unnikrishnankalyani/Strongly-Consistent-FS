// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: primarybackup.proto

#include "primarybackup.pb.h"
#include "primarybackup.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace primarybackup {

static const char* PrimaryBackup_method_names[] = {
  "/primarybackup.PrimaryBackup/Write",
  "/primarybackup.PrimaryBackup/Sync",
  "/primarybackup.PrimaryBackup/CheckSync",
  "/primarybackup.PrimaryBackup/Init",
};

std::unique_ptr< PrimaryBackup::Stub> PrimaryBackup::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PrimaryBackup::Stub> stub(new PrimaryBackup::Stub(channel, options));
  return stub;
}

PrimaryBackup::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Write_(PrimaryBackup_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sync_(PrimaryBackup_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CheckSync_(PrimaryBackup_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Init_(PrimaryBackup_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PrimaryBackup::Stub::Write(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::primarybackup::WriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::primarybackup::WriteRequest, ::primarybackup::WriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Write_, context, request, response);
}

void PrimaryBackup::Stub::async::Write(::grpc::ClientContext* context, const ::primarybackup::WriteRequest* request, ::primarybackup::WriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::primarybackup::WriteRequest, ::primarybackup::WriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void PrimaryBackup::Stub::async::Write(::grpc::ClientContext* context, const ::primarybackup::WriteRequest* request, ::primarybackup::WriteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::primarybackup::WriteResponse>* PrimaryBackup::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::primarybackup::WriteResponse, ::primarybackup::WriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Write_, context, request);
}

::grpc::ClientAsyncResponseReader< ::primarybackup::WriteResponse>* PrimaryBackup::Stub::AsyncWriteRaw(::grpc::ClientContext* context, const ::primarybackup::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::primarybackup::WriteRequest>* PrimaryBackup::Stub::SyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request) {
  return ::grpc::internal::ClientReaderFactory< ::primarybackup::WriteRequest>::Create(channel_.get(), rpcmethod_Sync_, context, request);
}

void PrimaryBackup::Stub::async::Sync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync* request, ::grpc::ClientReadReactor< ::primarybackup::WriteRequest>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::primarybackup::WriteRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::primarybackup::WriteRequest>* PrimaryBackup::Stub::AsyncSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::primarybackup::WriteRequest>::Create(channel_.get(), cq, rpcmethod_Sync_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::primarybackup::WriteRequest>* PrimaryBackup::Stub::PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::primarybackup::WriteRequest>::Create(channel_.get(), cq, rpcmethod_Sync_, context, request, false, nullptr);
}

::grpc::Status PrimaryBackup::Stub::CheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::primarybackup::HeartBeatSync* response) {
  return ::grpc::internal::BlockingUnaryCall< ::primarybackup::HeartBeatSync, ::primarybackup::HeartBeatSync, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckSync_, context, request, response);
}

void PrimaryBackup::Stub::async::CheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync* request, ::primarybackup::HeartBeatSync* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::primarybackup::HeartBeatSync, ::primarybackup::HeartBeatSync, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckSync_, context, request, response, std::move(f));
}

void PrimaryBackup::Stub::async::CheckSync(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync* request, ::primarybackup::HeartBeatSync* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::primarybackup::HeartBeatSync>* PrimaryBackup::Stub::PrepareAsyncCheckSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::primarybackup::HeartBeatSync, ::primarybackup::HeartBeatSync, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckSync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::primarybackup::HeartBeatSync>* PrimaryBackup::Stub::AsyncCheckSyncRaw(::grpc::ClientContext* context, const ::primarybackup::HeartBeatSync& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PrimaryBackup::Stub::Init(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::primarybackup::InitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::primarybackup::InitReq, ::primarybackup::InitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_, context, request, response);
}

void PrimaryBackup::Stub::async::Init(::grpc::ClientContext* context, const ::primarybackup::InitReq* request, ::primarybackup::InitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::primarybackup::InitReq, ::primarybackup::InitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void PrimaryBackup::Stub::async::Init(::grpc::ClientContext* context, const ::primarybackup::InitReq* request, ::primarybackup::InitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::primarybackup::InitRes>* PrimaryBackup::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::primarybackup::InitRes, ::primarybackup::InitReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::primarybackup::InitRes>* PrimaryBackup::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::primarybackup::InitReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

PrimaryBackup::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrimaryBackup_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PrimaryBackup::Service, ::primarybackup::WriteRequest, ::primarybackup::WriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PrimaryBackup::Service* service,
             ::grpc::ServerContext* ctx,
             const ::primarybackup::WriteRequest* req,
             ::primarybackup::WriteResponse* resp) {
               return service->Write(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrimaryBackup_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PrimaryBackup::Service, ::primarybackup::HeartBeatSync, ::primarybackup::WriteRequest>(
          [](PrimaryBackup::Service* service,
             ::grpc::ServerContext* ctx,
             const ::primarybackup::HeartBeatSync* req,
             ::grpc::ServerWriter<::primarybackup::WriteRequest>* writer) {
               return service->Sync(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrimaryBackup_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PrimaryBackup::Service, ::primarybackup::HeartBeatSync, ::primarybackup::HeartBeatSync, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PrimaryBackup::Service* service,
             ::grpc::ServerContext* ctx,
             const ::primarybackup::HeartBeatSync* req,
             ::primarybackup::HeartBeatSync* resp) {
               return service->CheckSync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrimaryBackup_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PrimaryBackup::Service, ::primarybackup::InitReq, ::primarybackup::InitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PrimaryBackup::Service* service,
             ::grpc::ServerContext* ctx,
             const ::primarybackup::InitReq* req,
             ::primarybackup::InitRes* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
}

PrimaryBackup::Service::~Service() {
}

::grpc::Status PrimaryBackup::Service::Write(::grpc::ServerContext* context, const ::primarybackup::WriteRequest* request, ::primarybackup::WriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PrimaryBackup::Service::Sync(::grpc::ServerContext* context, const ::primarybackup::HeartBeatSync* request, ::grpc::ServerWriter< ::primarybackup::WriteRequest>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PrimaryBackup::Service::CheckSync(::grpc::ServerContext* context, const ::primarybackup::HeartBeatSync* request, ::primarybackup::HeartBeatSync* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PrimaryBackup::Service::Init(::grpc::ServerContext* context, const ::primarybackup::InitReq* request, ::primarybackup::InitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace primarybackup

